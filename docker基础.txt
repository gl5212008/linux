

yum install psmisc

1.卸载旧版本
sudo yum remove docker \
                  docker-client \
                  docker-client-latest \
                  docker-common \
                  docker-latest \
                  docker-latest-logrotate \
                  docker-logrotate \
                  docker-selinux \
                  docker-engine-selinux \
                  docker-engine

2.设置存储库
sudo yum install -y yum-utils \
  device-mapper-persistent-data \
  lvm2

sudo yum-config-manager \
    --add-repo \
    https://download.docker.com/linux/centos/docker-ce.repo

3.安装docker社区版，docker企业版  docker-ee 
sudo yum install docker-ce


4.启动关闭docker
systemctl start docker


#安装过程如下

1
[root@master ~ 13:55:43]#sudo yum install docker-ce

2
docker-ce-stable                                                                          | 3.5 kB  00:00:00     
(1/2): docker-ce-stable/x86_64/updateinfo                                                 |   55 B  00:00:00     
(2/2): docker-ce-stable/x86_64/primary_db                                                 |  19 kB  00:00:00     
正在解决依赖关系
--> 正在检查事务
---> 软件包 docker-ce.x86_64.3.18.09.0-3.el7 将被 安装
--> 正在处理依赖关系 container-selinux >= 2.9，它被软件包 3:docker-ce-18.09.0-3.el7.x86_64 需要


3
依赖关系解决

=================================================================================================================
 Package                          架构             版本                         源                          大小
=================================================================================================================
正在安装:
 docker-ce                        x86_64           3:18.09.0-3.el7              docker-ce-stable            19 M
为依赖而安装:
 audit-libs-python                x86_64           2.8.1-3.el7_5.1              updates                     75 k
 checkpolicy                      x86_64           2.5-6.el7                    base                       294 k


 4
 已安装:
  docker-ce.x86_64 3:18.09.0-3.el7                                                                               

作为依赖被安装:
  audit-libs-python.x86_64 0:2.8.1-3.el7_5.1              checkpolicy.x86_64 0:2.5-6.el7                         
  container-selinux.noarch 2:2.68-1.el7                   containerd.io.x86_64 0:1.2.0-3.el7                     
  docker-ce-cli.x86_64 1:18.09.0-3.el7                    libcgroup.x86_64 0:0.41-15.el7                         
  libsemanage-python.x86_64 0:2.5-11.el7                  policycoreutils-python.x86_64 0:2.5-22.el7             
  python-IPy.noarch 0:0.75-6.el7                          setools-libs.x86_64 0:3.3.8-2.el7                      

作为依赖被升级:
  audit.x86_64 0:2.8.1-3.el7_5.1                       audit-libs.x86_64 0:2.8.1-3.el7_5.1                      

完毕！


https://download.docker.com/linux/centos/7/x86_64/stable/Packages/


#yum安装软件的整个过程
1.配置yum源，在/etc/yum.repos.d/下产生 docker.repo文件
2.检查这个文件中的baseurl地址，下载的软件包就来自于这里
3.baseurl=https://download.docker.com/linux/centos/7/$basearch/stable
4.查看yum到底安装的是谁
	docker-ce-18.09.0-3.el7.x86_64.rpm                                                    2018-11-07 23:58:48 18.7 
	docker-ce-cli-18.09.0-3.el7.x86_64.rpm  
5.yum自动下载rpm包，自动解决依赖关系，非常方便
6.通过yum下载的软件包，systemctl进行管理
7. systemctl start docker 
8.docker version查看版本



假如你配置yum官方仓库无法安装，由于网络因素，那你就别配yum官方仓库了，删掉仓库
通过自带的epel源下载  yum install docker  ，只是这个版本较低，学习使用，公司配置一定要根据官网来


docker的容器概念

通过docker  ps查看 正在运行中的容器
docker ps -a 查看所有运行过的容器记录


docker容器必须有后台进程在运行
	如果没有运行的进程，docker容器实例就挂了
	咱们那个redis
		是不是有一个 daemonize  yes这个后台运行参数

#更改linux dns记录，可能会稍有提升网速

[root@master /etc/yum.repos.d 15:45:20]#cat /etc/resolv.conf
# Generated by NetworkManager
nameserver 223.5.5.5
nameserver 223.6.6.6


		
docker常用命令
1.docker加速器，加速镜像下载
curl -sSL https://get.daocloud.io/daotools/set_mirror.sh | sh -s http://95822026.m.daocloud.io
2.获取docker镜像
docker search ubuntu   #查找ubuntu镜像
docker pull ubuntu  #下载ubuntu镜像
3.查看docker存在哪些镜像
docker image ls
docker images 
4.删除镜像文件
	1.删除容器相关记录
		docker rm  容器id 

	2.删除镜像记录
       docker  rmi 镜像名(镜像id)
	
	3.批量删除容器记录
	docker rm `docker ps -aq` 
	
5.检查容器进程（存活）
docker ps 
6.检查容器进程记录（挂掉的）
docker ps -a 
7. 运行镜像，产生容器
docker run hello-world 
8.交互式运行docker容器
docker run -it --rm ubuntu bash 
	docker run就是运行容器的命令。
	参数
	 -it ： -i 是交互式操作，-t是终端
	 -rm  :   容器退出后将其删除。也可以不指定参数，手动docker rm，使用-rm可以避免浪费空间。
	 ubuntu:14.04   这指的是镜像文件
	 bash   :  指定用交互式的shell，因此需要bash命令


docker运行centos

	1.下载centos镜像
	docker pull centos 
	2.查看centos镜像
	docker images 
	3.运行centos镜像
	docker run -it centos  #  此条命令，会自动下载centos镜像
	
docker在centos中运行一段shell脚本，后台运行
	docker run -d centos /bin/sh -c "while true;do echo hello centos; sleep 1;done"
	
docker容器常用命令
	docker logs 容器id  #查看容器内的标准输出日志
	docker stop  容器id   #停止容器运行
	docker start 容器id   #启动容器运行



构建自定义的镜像文件
	1.我们进入交互式的centos容器中，发现没有vim命令
	docker run -it centos
	2.在当前容器中，安装一个vim
	yum install -y vim
	3.安装好vim之后，exit退出容器
	exit
	4.查看刚才安装好vim的容器记录
	docker container ls -a
	5.提交这个容器，创建新的image
	docker commit 059fdea031ba chaoyu/centos-vim
	6.查看镜像文件
	[root@master /home]docker images
	REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
	chaoyu/centos-vim   latest              fd2685ae25fe        5 minutes ago       348MB


docker运行一个web应用，通过端口映射，windows浏览器就可以访问了
	1.运行一个python web app
	docker run -d -P training/webapp python app.py
	参数讲解 
		-d 后台运行容器
		-P  随机端口映射， 将容器中暴露的端口 >  随机映射一个宿主机的端口
							5000   >   92320
	docker run -d -p 9000:5000 training/webapp python app.py
		-p 宿主机端口:容器端口
		小写的p是指定端口映射

docker查看容器内的端口映射状态
	[root@oldboy_python ~ 16:49:01]#docker port c0b
	5000/tcp -> 0.0.0.0:9000
	


1.docker运行一个flask web应用，暴露端口供给windows使用
	1.docker run -it centos
	2. 安装 easy_install  命令，python2软件包管理
		yum install  python-setuptools 
	3.安装flask 
		easy_install flask
	4.编写好flask  web脚本 
		from flask import Flask 

		app = Flask(__name__) 

		@app.route('/') 
		def index(): 
			return '<h1>Im flask web, im from docker !!!!!!! !</h1>' 

		#此脚本当做模块导入时候，__main__里代码不执行
		#当做脚本文件直接运行的时候，执行__main__代码
		if __name__ == '__main__':
		   app.run(host='0.0.0.0',port=9000)
		   
	5.退出容器，产生容器id记录
		exit 
	6.提交此容器记录，构建镜像
		docker commit 976  s12/flask_web
	7.查看镜像
		docker images 
	8.运行flask_web镜像，暴露端口访问
		docker run -d -p 7000:9000  s12/flask-web python /home/flask-web.py
	9.此时在windows浏览器访问 7000端口的 flask应用
	
	
docker hub的使用：
	1.docker提供了一个类似于github的仓库dockerhub,
	网址https://hub.docker.com/需要注册使用
	2.注册docker id后，在linux中登录dockerhub
	docker login

	注意要保证image的tag是账户名，如果镜像名字不对，需要改一下tag
	docker tag chaoyu/centos-vim yuchao163/centos-vim
	语法是：  docker tag   仓库名   yuchao163/仓库名


	3.推送docker image到dockerhub
	docker push yuchao163/centps-cmd-exec:latest
	4.在dockerhub中检查镜像
	https://hub.docker.com/
	5.删除本地镜像，测试下载pull 镜像文件
	docker pull yuchao163/centos-entrypoint-exec



	
docker私有仓库搭建：
	docker  
	-v 参数  
	假设我要在docker容器中安装 nginx 软件
		nginx软件有网页根目录
			root  /opt/static/nginx 
						js 
						css 
	这个nginx静态文件，可以放在容器中管理
	也可以通过-v参数挂载一个数据
			-v  宿主机/opt/staic/nginx      容器/opt/static/nginx  
						js1 js2 js3              容器中的nginx软件，读取数据时候，通过-v参数，去宿主机读取
						
						
	1.下载docker 私有仓库镜像	
		docker pull registry
	2.启动私有仓库容器实例
	docker run -d \
    -p 5000:5000 \
    -v /opt/data/registry:/var/lib/registry \
    registry
	
	3.检查私有仓库的容器id
	docker ps 
	
	4.修改本地镜像的tag，便于推送到本地镜像仓库
	docker tag 镜像名    10.0.0.10:5000/镜像名
	
	5.修改docker配置文件，因为他默认不让推送非https的镜像
		1.找到本地docker文件
		vim /etc/docker/daemon.json 
		2.写入配置
		必须注意此文件是json格式！！！注意引号
		
			{"registry-mirrors": ["http://95822026.m.daocloud.io"],
				"insecure-registries":["10.0.0.10:5000"]
			}
		3.将此文件，添加到docker服务脚本中
		vim /lib/systemd/system/docker.service  
		4.写入以下配置，注意！！！，写入到[Service]配置块中，加载此配置文件
		[Service]
		EnvironmentFile=/etc/docker/daemon.json
	
		5.修改了docker配置文件，重新加载docker
			systemctl daemon-reload
		6.重启docker服务，使得生效
			systemctl restart docker 
		7.由于重启了docker，所有的容器实例全挂了，因此要打开私有仓库的容器实例
			1.docker ps -a   检查私有仓库的容器记录
			2. docker start  私有仓库的id
			3.此时docker  ps  检查 私有仓库服务是否启动
		8.推送本地镜像到私有docker仓库
			docker push 10.0.0.10:5000/hello-world 
		9.docker私有仓库提供了API数据可供查看
			http://10.0.0.10:5000/v2/_catalog
			
		10.可以测试删除本地镜像，然后从私有仓库拖取镜像
		11.完毕。。。
		

解决docker可能无法联网的问题：
	1.检查自己本机是否可以上网  ping 223.5.5.5 
	
	2.永久关闭自己本机的防火墙  (注意这个步骤只是自己学习配置)
		iptables -F 
		systemctl disable firewalld 
		永久关闭selinux，回去看笔记 

			
		

	









	







		
	

	